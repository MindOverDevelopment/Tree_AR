{% comment %}
// Copyright 2020 Visual Design Cafe. All rights reserved.
// This shader was created using ShaderX, a shader framework by Visual Design Cafe.
// https://www.visualdesigncafe.com/shaderx

// Package: Nature Shaders
// Website: https://www.visualdesigncafe.com/nature-shaders
// Documentation: https://support.visualdesigncafe.com/hc/categories/900000043503
{% endcomment %}

Properties
{
    _Interaction("Interaction", Float) = 0
    _InteractionDuration("Interaction Duration", Range(0, 5)) = 1.5
    _InteractionStrength("Interaction Strength", Range(0, 1)) = 1
    _InteractionPushDown("Interaction PushDown", Range(0,1)) = 1
}

CBUFFER_START( UnityPerMaterial )
    float _Interaction;
    float _InteractionDuration;
    float _InteractionStrength;
    float _InteractionPushDown;
CBUFFER_END

// Uses a global keyword to enable/disable interaction in project quality settings.
#pragma multi_compile_vertex _INTERACTION_OFF _INTERACTION

#if defined(_INTERACTION)
    #define _INTERACTION_ON
#else
    #ifndef _INTERACTION_OFF
        #define _INTERACTION_OFF
    #endif
#endif

#ifdef _INTERACTION
    float4 _InteractionZonePosition;
    float4 _InteractionZoneSize;
    float _InteractionDataTexelSize;
    float _InteractionConstantFade;
    float g_TrailPopupSpeed;

    sampler2D _InteractionData;

    float2 InteractionDataUV( float3 vertexWorldPosition )
    {
        float2 relativePosition = vertexWorldPosition.xz - _InteractionZonePosition.xz + _InteractionZoneSize.xz * 0.5;
        float2 normalizedPosition = relativePosition / _InteractionZoneSize.xz;
        return normalizedPosition;
    }

    float4 SampleInteractionData( float2 uv, float2 offset )
    {
        return tex2Dlod(_InteractionData, float4(uv.xy + offset.xy, 0, 0));
    }

    float GetHeight( float color )
    {
        float ground = _InteractionZonePosition.y - _InteractionZoneSize.y * 0.5;
        return ground + (1-color) * _InteractionZoneSize.y;
    }

    float4 GetTimeAdjustedData ( float4 data, float timeOffset ) 
    {
        #if SHADERPASS == SHADERPASS_MOTION_VECTORS
            data.b = max(0, data.b + timeOffset);
            data.g = saturate(data.g + _InteractionConstantFade * timeOffset * ( 1 - saturate(data.b * g_TrailPopupSpeed) ));
            return data;
        #else
            return data;
        #endif
    }

    void SampleAverageInteractionData( float3 samplePosition, float timeOffset, out float4 data, out float3 normal )
    {
        float2 sampleUV = InteractionDataUV(samplePosition);

        const float texelSampleOffset = 2;
        float4 center = SampleInteractionData( sampleUV, _InteractionDataTexelSize * float2( 0, 0 ));
        float4 top    = SampleInteractionData( sampleUV, _InteractionDataTexelSize * float2( 0, -texelSampleOffset ));
        float4 left   = SampleInteractionData( sampleUV, _InteractionDataTexelSize * float2( -texelSampleOffset, 0 ));
        float4 right  = SampleInteractionData( sampleUV, _InteractionDataTexelSize * float2( texelSampleOffset, 0 ));
        float4 bottom = SampleInteractionData( sampleUV, _InteractionDataTexelSize * float2( 0, texelSampleOffset ));

        data = center;

        #if SHADERPASS == SHADERPASS_MOTION_VECTORS
            data = GetTimeAdjustedData(data, timeOffset);
            top = GetTimeAdjustedData(top, timeOffset);
            left = GetTimeAdjustedData(left, timeOffset);
            right = GetTimeAdjustedData(right, timeOffset);
            bottom = GetTimeAdjustedData(bottom, timeOffset);
        #endif

        float4 h;
        h[0] = GetHeight( top.g );
        h[1] = GetHeight( left.g );
        h[2] = GetHeight( right.g );
        h[3] = GetHeight( bottom.g );
        float3 n;
        n.z = h[3] - h[0];
        n.x = h[2] - h[1];
        n.y = 0.001;

        normal = normalize(n);
    }

    void Interact( 
        inout float3 vertexWorldPosition, 
        float3 objectPivot, 
        float mask,
        float phaseOffset,
        float interactionDuration,
        float interactionStrength,
        float interactionPushDown,
        float timeOffset )
    {
        // There is no valid interaction data if the vertex is outside of the interaction zone.
        float3 dist = abs(vertexWorldPosition - _InteractionZonePosition.xyz);

        UNITY_BRANCH
        if( dist.x > _InteractionZoneSize.x * 0.5 
            || dist.y > _InteractionZoneSize.y * 0.5 
            || dist.z > _InteractionZoneSize.z * 0.5 )
        {
            return;
        }

        // Sample at either objectPivot or vertexWorldPosition. 
        // Object Pivot is good for plants that have a lot of vertices, 
        // because sampling per-vertex can cause distortion. 
        // Vertex position is best for grass.
        float4 data;
        float3 normal;
        const float pivotOffset = 0.2;
        float3 samplePosition = 
            lerp(
                objectPivot.xyz + float3(0,pivotOffset,0), 
                vertexWorldPosition.xyz, 
                _Interaction - 1.0 ); // Off: 0, Pivot: 1, Vertex: 2.

        SampleAverageInteractionData( samplePosition, timeOffset, data, normal );

        float fade = data.r - data.g;
        float life = 1 - saturate(fade / _InteractionConstantFade / (interactionDuration + (1-phaseOffset) * 2));

        // It is possible that the normal can't be calculated, for example: if there is a box
        // collider that is perfectly horizontal then the normals under the box will end up as 0.
        // In this case, replace the normal with the direction from the object pivot.
        if( !all(normal) )
            normal.xz = objectPivot.xz - vertexWorldPosition.xz;

        float motionAmplitude = cos((1-life) * 20.0 ) * life * life;
        float heightDifference = max(vertexWorldPosition.y - GetHeight( data.g ), 0);
        float overlap = max(vertexWorldPosition.y - GetHeight( data.r  ), 0);

        vertexWorldPosition.y -= 
            min( 
                heightDifference * interactionPushDown, 
                max( vertexWorldPosition.y - objectPivot.y, 0 ) );
        
        vertexWorldPosition = 
            FixStretching(
                vertexWorldPosition
                    + float3(normal.x, 0, normal.z) 
                        * motionAmplitude 
                        * mask 
                        * interactionStrength 
                        * overlap,
                vertexWorldPosition,
                float3(samplePosition.x, objectPivot.y, samplePosition.z));
    }
#endif
