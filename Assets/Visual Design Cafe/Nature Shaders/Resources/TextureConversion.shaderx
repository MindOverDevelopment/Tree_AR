{% comment %}
// Copyright 2020 Visual Design Cafe. All rights reserved.
// This shader was created using ShaderX, a shader framework by Visual Design Cafe.
// https://www.visualdesigncafe.com/shaderx

// Package: Nature Shaders
// Website: https://www.visualdesigncafe.com/nature-shaders
// Documentation: https://support.visualdesigncafe.com/hc/categories/900000043503
{% endcomment %}

Shader "Hidden/Nature Shaders/TextureConversion"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
    }
    SubShader
    {
        // No culling or depth
        Cull Off ZWrite Off ZTest Always

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #pragma multi_compile_local _ RGB_TO_A A_TO_RGB GRAYSCALE_RGB AVERAGE_RGB

            #include "UnityCG.cginc"

            float g_TrailPopupSpeed = 1;

            float3 _Offset;
            float _Fade;
            float _DeltaTime;

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
            };

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv;
                return o;
            }

            sampler2D _MainTex;

            half4 frag (v2f i) : SV_Target
            {
                float2 uv = i.uv;
                half4 color = tex2D(_MainTex, uv);
                #ifdef RGB_TO_A
                    color.a = (color.r + color.g + color.b) / 3.0;
                #endif
                #ifdef A_TO_RGB
                    color.rgb = half3(color.a, color.a, color.a);
                #endif
                #ifdef GRAYSCALE_RGB
                    half grayscale = dot( color.rgb, float3(0.22, 0.707, 0.071) );
                    color.rgb = half3(grayscale, grayscale, grayscale);
                #endif
                #ifdef AVERAGE_RGB
                    half average = (color.r + color.g + color.b) / 3.0;
                    color.rgb = half3(average, average, average);
                #endif
                return color;
            }
            ENDCG
        }
    }
}
